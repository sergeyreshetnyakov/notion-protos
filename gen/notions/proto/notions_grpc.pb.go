// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: proto/notions.proto

package notions

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Notions_Get_FullMethodName    = "/Notions/Get"
	Notions_Add_FullMethodName    = "/Notions/Add"
	Notions_Update_FullMethodName = "/Notions/Update"
	Notions_Delete_FullMethodName = "/Notions/Delete"
)

// NotionsClient is the client API for Notions service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NotionsClient interface {
	Get(ctx context.Context, in *NotionRequest_Get, opts ...grpc.CallOption) (grpc.ServerStreamingClient[NotionResponse_Get], error)
	Add(ctx context.Context, in *NotionRequest_Add, opts ...grpc.CallOption) (*NotionResponse_Add, error)
	Update(ctx context.Context, in *NotionRequest_Update, opts ...grpc.CallOption) (*NotionResponse_Update, error)
	Delete(ctx context.Context, in *NotionRequest_Delete, opts ...grpc.CallOption) (*NotionResponse_Delete, error)
}

type notionsClient struct {
	cc grpc.ClientConnInterface
}

func NewNotionsClient(cc grpc.ClientConnInterface) NotionsClient {
	return &notionsClient{cc}
}

func (c *notionsClient) Get(ctx context.Context, in *NotionRequest_Get, opts ...grpc.CallOption) (grpc.ServerStreamingClient[NotionResponse_Get], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Notions_ServiceDesc.Streams[0], Notions_Get_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[NotionRequest_Get, NotionResponse_Get]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Notions_GetClient = grpc.ServerStreamingClient[NotionResponse_Get]

func (c *notionsClient) Add(ctx context.Context, in *NotionRequest_Add, opts ...grpc.CallOption) (*NotionResponse_Add, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NotionResponse_Add)
	err := c.cc.Invoke(ctx, Notions_Add_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notionsClient) Update(ctx context.Context, in *NotionRequest_Update, opts ...grpc.CallOption) (*NotionResponse_Update, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NotionResponse_Update)
	err := c.cc.Invoke(ctx, Notions_Update_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notionsClient) Delete(ctx context.Context, in *NotionRequest_Delete, opts ...grpc.CallOption) (*NotionResponse_Delete, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NotionResponse_Delete)
	err := c.cc.Invoke(ctx, Notions_Delete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NotionsServer is the server API for Notions service.
// All implementations must embed UnimplementedNotionsServer
// for forward compatibility.
type NotionsServer interface {
	Get(*NotionRequest_Get, grpc.ServerStreamingServer[NotionResponse_Get]) error
	Add(context.Context, *NotionRequest_Add) (*NotionResponse_Add, error)
	Update(context.Context, *NotionRequest_Update) (*NotionResponse_Update, error)
	Delete(context.Context, *NotionRequest_Delete) (*NotionResponse_Delete, error)
	mustEmbedUnimplementedNotionsServer()
}

// UnimplementedNotionsServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedNotionsServer struct{}

func (UnimplementedNotionsServer) Get(*NotionRequest_Get, grpc.ServerStreamingServer[NotionResponse_Get]) error {
	return status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedNotionsServer) Add(context.Context, *NotionRequest_Add) (*NotionResponse_Add, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (UnimplementedNotionsServer) Update(context.Context, *NotionRequest_Update) (*NotionResponse_Update, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedNotionsServer) Delete(context.Context, *NotionRequest_Delete) (*NotionResponse_Delete, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedNotionsServer) mustEmbedUnimplementedNotionsServer() {}
func (UnimplementedNotionsServer) testEmbeddedByValue()                 {}

// UnsafeNotionsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NotionsServer will
// result in compilation errors.
type UnsafeNotionsServer interface {
	mustEmbedUnimplementedNotionsServer()
}

func RegisterNotionsServer(s grpc.ServiceRegistrar, srv NotionsServer) {
	// If the following call pancis, it indicates UnimplementedNotionsServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Notions_ServiceDesc, srv)
}

func _Notions_Get_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(NotionRequest_Get)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NotionsServer).Get(m, &grpc.GenericServerStream[NotionRequest_Get, NotionResponse_Get]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Notions_GetServer = grpc.ServerStreamingServer[NotionResponse_Get]

func _Notions_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotionRequest_Add)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotionsServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Notions_Add_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotionsServer).Add(ctx, req.(*NotionRequest_Add))
	}
	return interceptor(ctx, in, info, handler)
}

func _Notions_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotionRequest_Update)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotionsServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Notions_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotionsServer).Update(ctx, req.(*NotionRequest_Update))
	}
	return interceptor(ctx, in, info, handler)
}

func _Notions_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotionRequest_Delete)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotionsServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Notions_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotionsServer).Delete(ctx, req.(*NotionRequest_Delete))
	}
	return interceptor(ctx, in, info, handler)
}

// Notions_ServiceDesc is the grpc.ServiceDesc for Notions service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Notions_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Notions",
	HandlerType: (*NotionsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Add",
			Handler:    _Notions_Add_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _Notions_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Notions_Delete_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Get",
			Handler:       _Notions_Get_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/notions.proto",
}
